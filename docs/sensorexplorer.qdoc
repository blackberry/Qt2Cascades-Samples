/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page sensorexplorer
    \example sensorexplorer
    \title Sensor Explorer Example

    \section1 Description

    The Sensor Explorer example demonstrates how to introspect all available sensors of a device.

    \div {class="centerAlign"}
    \inlineimage sensorexplorer-example.png
    \inlineimage sensorexplorer-example1.png
    \inlineimage sensorexplorer-example2.png
    \enddiv

    \section1 Overview
    In this example we'll learn how to use the QSensor and QSensorReading classes together with
    the meta-object system of Qt to introspect all available sensors of the device and show their
    current sensor data.

    \section1 The UI
    The UI of this sample application consists of three screens. The first screen shows the list of
    all available sensors of the device. When the user selects on of the sensors the second screen
    is presented, which shows all properties of the sensor with name, type and current value.
    The user can start the sensor in this screen and use the 'Values' button to show up the third screen.
    The third screen shows now all the values that are read from the sensor and they are updated whenever
    the hardware sensor updates its data.

    The business logic of the application is encapsulated in the \c SensorExplorer class which is made available
    to the UI under the name '_sensorExplorer'.

    \snippet sensorexplorer/assets/main.qml 0

    Beside a title label, the first page contains a \c ListView that shows all the available sensors. The list of
    sensors is provided by a \c DataModel that is made available by the \c SensorExplorer's 'sensorModel' property.
    When the user selects a sensor, we invoke the \c setCurrentSensor method of the \c SensorExplorer object.
    That will trigger the \c SensorExplorer to update all meta-data and values for this sensor.
    Additionally we push the sensor page (2nd screen) on the navigation pane.

    \snippet sensorexplorer/assets/SensorPage.qml 0

    The sensor page contains a \c ListView as well, which shows all properties of the selected sensor. The list of properties
    is provided by a \c DataModel that is made available by the SensorExplorer's 'sensorPropertiesModel' property.
    This time we use a \c StandardListItem control for the list view entries and assign the name, type and value of
    the property to its labels.

    \snippet sensorexplorer/assets/SensorPage.qml 1

    The first button in the sensor page allows the user to start or stop the sensor. The text of this button depends on the
    'sensorActivity' property of the \c SensorExplorer and clicking the button will toggle this property.

    If the user presses the 'Values' button, we push the reading page (3rd screen) on the navigation pane.

    \snippet sensorexplorer/assets/ReadingPage.qml 0

    The reading page contains a similar list view like the sensor page, just that it uses the \c SensorExplorer's 'readingPropertiesModel'
    as data model.

    \section1 SensorExplorer

    The \c SensorExplorer class encapsulates the business logic of the application. It uses the QSensor and QSensorReading classes
    internally to retrieve the available sensors and their properties. The data are provided to the UI through properties of type
    \c DataModel. An additional property 'sensorActive' defines whether the selected sensor is active or not.

    \snippet sensorexplorer/src/SensorExplorer.hpp 0

    Inside the constructor of SensorExplorer we initialize the data models with \c GroupDataModels, so that we can store
    the sensor and reading data inside them. We also switch of their grouping feature, since we don't want to show headers in the
    \c ListView. For the 'readingPropertiesModel' we specify a sort key, since we want to look up data in this model later on
    for on-the-fly updates of the values.
    At the end we trigger the initial load of the available sensors.

    \snippet sensorexplorer/src/SensorExplorer.cpp 0

    Inside \c loadSensors() we clear the content of the sensor model before we fill the model with new sensor data.
    For that we retrieve the information about all available sensor types (on each device their might be a different subset
    of supported sensors) and about all instances for these types (there might be multiple temperature sensors for example).
    After we checked that the sensor is functional, we add a new entry to the sensor model with the identifier and type of the sensor.

    \snippet sensorexplorer/src/SensorExplorer.cpp 3

    If the user selects now one entry of that sensor model in the UI, the \c setCurrentSensor() method is invoked.

    Inside this method we retrieve the identifier and type of the selected sensor and create a new QSensor instance from these data.
    Afterwards we trigger the propagation of the sensor properties and reading properties to the models.

    \snippet sensorexplorer/src/SensorExplorer.cpp 2

    To fill the sensor properties model, we use the Qt's meta-object system for introspection.
    The QMetaObject of the QSensor instance allows us to iterate over all the properties that are provided by the sensor and
    retrieve their names, types and current values. For each property we create a new entry in the 'sensorPropertiesModel'.

    \snippet sensorexplorer/src/SensorExplorer.cpp 4

    Filling the reading properties model is similar to the previous method, just that we use the QMetaObject of the sensor's
    QSensorReading object.

    \snippet sensorexplorer/src/SensorExplorer.cpp 5

    Whenever the selected sensor reports new data, the filter method is invoked. To limit the number of updates in the UI, we
    check for the time that has passed since the last invocation. The rest of the method is similar to \c loadReadingProperties()
    with the difference that we do not insert a new entry in the model but update an existing one.

    \snippet sensorexplorer/src/SensorExplorer.cpp 1
*/
