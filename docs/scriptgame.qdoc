/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page scriptgame
    \example scriptgame
    \title Script Game Example

    \section1 Description

    The Script Game example shows how to extend a C++ application with scripting
    functionality.

    \image scriptgame-example.png

    \section1 Overview
    In this example we'll learn how to use the QScriptEngine and QScriptValue classes
    to export C++ objects into a scripting environment, where user written JavaScript scripts
    can interact with them.

    In this example we have a maze with a player inside. The player object is exported to
    the scripting environment under the identifier 'player'. The user can now move the player
    by executing JavaScript code snippets like 'player.turnLeft()' to turn the player or 'player.go()'
    to move the player by one step in the current direction.

    \section1 The UI
    The UI of this sample application consists of the following components:
    \list
      \o The maze where the player is located in
      \o A DropDown to select a predefined JavaScript code snippet
      \o A \c TextArea where the user can enter or modify the JavaScript code snippet
      \o A 'Run Script' button to execute the JavaScript code
    \endlist

    The business logic of the application is encapsulated in the class GameController, which is
    exported to the UI as '_gameController'.

    The main.qml contains the \c Maze object (implemented in Maze.qml)

    \snippet scriptgame/assets/main.qml 0

    and the \c TextField and \c Button to enter and run the script.

    \snippet scriptgame/assets/main.qml 1

    Whenever the user clicks the 'Run Script' button, the \c run() slot of the GameController object is invoked
    with the content of the \c TextField as parameter.

    \snippet scriptgame/assets/Maze.qml 0

    The Maze.qml contains a \c Container with the 'objectName' property set, so that it can be looked up
    from within C++. The player and the walls will be placed inside this container.

    \section1 Player
    The \c Player class encapsulates the business logic of a player on the maze board.
    It provides methods to change direction and position of the player.

    \snippet scriptgame/src/Player.hpp 0

    The \c Player class also stores a reference to the UI object (\c ImageView) that represents the player
    on the screen.

    Inside the constructor we create the \c ImageView, load the player image and add it to the \c Container
    that acts as board.

    \snippet scriptgame/src/Player.cpp 0

    If the \c turnLeft() method is invoked, we rotate the \c ImageView to the left by 90 degree and update the
    direction variable depending on the current direction.

    \snippet scriptgame/src/Player.cpp 1

    If the \c turnLeft() method is invoked, we rotate the \c ImageView to the right by 90 degree and update the
    direction variable depending on the current direction.

    \snippet scriptgame/src/Player.cpp 2

    If the \c go() method is invoked, calculate the new position depending on our current position and the current
    direction. If the \c canMoveTo() method of the \c Board object returns \c true (that means there is no wall)
    for the new position, we update our position and also adapt the position of the \c ImageView on screen.

    \snippet scriptgame/src/Player.cpp 3

    \section1 Board
    The \c Board class contains all the business logic for handling the maze board.
    It generates a distribution of blocks on the maze (either static or randomly as configurable via
    the staticBlockDistribution property) and it also generates the tiles (ImageViews) that are displayed
    in the UI.

    \snippet scriptgame/src/Board.hpp 0

    Inside the constructor we fill the board representation (a QVector<QVector<bool>>) with \c false to mark
    the complete board as empty. Later on we'll change the values to \c true at the positions where a wall is located.

    \snippet scriptgame/src/Board.cpp 0

    The \c canMoveTo() method returns whether there is no wall at the requested position and therefor we can move
    the player there.

    \snippet scriptgame/src/Board.cpp 1

    The \c reset() method rebuilds the layout of the maze. Depending on the 'staticBlockDistribution' property it
    places a couple of walls at fixed or random positions.

    \snippet scriptgame/src/Board.cpp 2

    \section1 GameController
    The \c GameController is the central class of this application.
    It contains the objects that encapsulate the business logic (\c Board and \c Player)
    and also the QScriptEngine, which is responsible for changing the properties of
    the \c Board and \c Player objects according to the JavaScript input.

    \snippet scriptgame/src/GameController.cpp 1

    The \c reset() method is the one that sets up the scripting environment. For that it recreates
    a QScriptEngine object, which will do all the JavaScript parsing and execution.
    Exporting the \c GameController, \c Board and \c Player object to the scripting environment can
    simply be done by calling \l{QScriptEngine::}{newQObject()} on the QScriptEngine to get a QScriptValue that
    wrapps the C++ object, and then calling \l{QScriptValue::}{setProperty()} on the global object to assign a name
    to it.

    To allow the user to create new \c Player objects from within the JavaScript, we have to register a constructor
    function that is called whenever the JavaScript contains a statement like 'var p = new Player(board)'.
    This is done by wrapping the \c constructNewPlayer() function inside a QScriptValue and register it to the
    scripting environment under the name 'Player'.

    \snippet scriptgame/src/GameController.cpp 0

    The \c run() method of the GameController object is invoked whenever the user clicks on the 'Run Script' button.

    \snippet scriptgame/src/GameController.cpp 2

    Inside this method we call the \l{QScriptEngine::}{evaluate()} method of the QScriptEngine object to execute
    the JavaScript code that we got passed in as parameter.
    The return value can be tested for the occurrence of an error.
*/
