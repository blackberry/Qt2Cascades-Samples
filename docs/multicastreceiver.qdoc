/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page multicastreceiver
    \example multicastreceiver
    \title Multicast Receiver Example

    \section1 Description

    The Multicast Receiver example shows how to receive information that is
    sent to a multicast group.

    \image multicastreceiver-example.png

    \section1 Overview
    In this example we'll learn how to use the QUdpSocket class to send and receive multicast messages
    on the network.

    The example application is splitted in two executables, \l{multicastsender}{multicastsender} and multicastreceiver.
    While the \l{multicastsender}{multicastsender} allows the user to start the multicasting of messages on the local network, the multicastreceiver
    will listen on the local network for these messages and display the received ones in the UI.

    \section1 Receiver
    The central class in multicastreceiver is Receiver, which encapsulates the retrieval of the multicasted messages
    and provides a property to display the content of the received datagrams in the UI.

    \snippet multicastreceiver/assets/main.qml 0

    The 'status' property of the exported Receiver object is bound against the 'text' property of a Label control, so
    that whenever a new datagram arrives, the text is updated automatically on screen.

    \snippet multicastreceiver/src/Receiver.cpp 0

    Inside the constructor of the Receiver class, we initialize the 'status' property and create the QUdpSocket object that
    encapsulates the low-level network communication.
    By calling \l{QUdpSocket::bind()}{bind()} we let the socket listen on port 45454 for incoming messages.
    We also have to tell the socket which multicast group we want to join, that's done by calling \l{QUdpSocket::joinMulticastGroup()}{joinMulticastGroup()}.
    In the next step we connect the \l{QUdpSocket::readyRead()}{readyRead()} signal of the socket, which is emitted whenever
    a new datagram arrived, against our own slot processPendingDatagrams().

    \snippet broadcastreceiver/src/Receiver.cpp 1

    In processPendingDatagrams() we check whether the socket still has pending datagrams and if that's the case, we read the next
    datagram from the socket and store its content in the 'status' property. By emitting the 'statusChanged()' signal, we trigger
    the reevaluation of all property bindings in the UI where 'status' is used.
*/
