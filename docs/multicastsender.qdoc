/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page multicastsender
    \example multicastsender
    \title Multicast Sender Example

    \section1 Description

    The Multicast Sender example shows how to send information to multiple
    clients in a multicast group.

    \image multicastsender-example.png

    \section1 Overview
    In this example we'll learn how to use the QUdpSocket class to send and receive multicast messages
    on the network.

    The example application is splitted in two executables, multicastsender and \l{multicastreceiver}{multicastreceiver}.
    While the multicastsender allows the user to start the multicasting of messages on the local network, the \l{multicastreceiver}{multicastreceiver}
    will listen on the local network for these messages and display the received ones in the UI.

    \section1 Sender
    The central class in multicastsender is Sender, which encapsulates the multicasting of the single messages
    and provides a property to display the current progress and status information of the multicasting and a property
    to change the time-to-live field of the multicast datagrams.

    Whenever the user clicks the 'Start' button in the UI, the startSending() slot of the exported Sender object is invoked:

    \snippet multicastsender/assets/main.qml 2

    The 'status' property of the Sender object is bound against a Label control to visualize the current progress and status information
    of the sender.

    \snippet multicastsender/assets/main.qml 0

    Additionally the the 'ttl' property of the Sender object is bound against a TextField control and is updated whenever the
    text of the TextField is changed by the user.

    \snippet multicastsender/assets/main.qml 1

    Inside the constructor of Sender we initialize the 'status' property, the counter for the number of sent messages
    and a timer object. This timer object is used to trigger the multicasting of the messages in an interval of 1 second.
    Additionally the QUdpSocket object is created, which encapsulates the low-level network access.
    The address of the multicast group is hard-coded to 239.255.43.21 here and will be used by the \l{multicastreceiver}{multicastreceiver} as well.

    \snippet multicastsender/src/Sender.cpp 0

    The startSending() method, which is called when the user clicks on the 'Start' button, starts the timer, which will invoke
    the sendDatagram() slot whenever it times out.

    \snippet multicastsender/src/Sender.cpp 1

    Inside sendDatagram() the actual work is done. At first the 'status' property is updated with the progress information and
    its change notification signal is emitted to let the UI update all property bindings where 'status' is involved in.
    In a second step the datagram content is assembled and afterwards it is multicasted over the network by calling \l{QUdpSocket::writeDatagram()}{writeDatagram()}
    on the QUdpSocket object. Additionally to the datagram content and size we also pass the address of the multicast group and the port number, which is
    hard-coded to 45454 in this example.

    \snippet multicastsender/src/Sender.cpp 2

    If the user changes the content of the TTL (time-to-live) field in the UI, setTtl() will be called with the content of the TextField
    as parameter. If the entered value is really a number and it differs from the current TTL we update the TTL property of the QUdpSocket object
    and signal that the 'ttl' property has changed.

    \snippet multicastsender/src/Sender.cpp 3
*/
