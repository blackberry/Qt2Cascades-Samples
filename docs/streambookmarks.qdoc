/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page streambookmarks
    \example streambookmarks
    \title QXmlStream Bookmarks Example

    \section1 Description

    The QXmlStream Bookmarks example provides a reader for XML Bookmark
    Exchange Language (XBEL) files using Qt's QXmlStreamReader class
    for reading, and QXmlStreamWriter class for writing the files.

    \image streambookmarks-example.png

    \section1 Overview
    In this example we'll learn how to use the QXmlStreamReader and QXmlStreamWriter classes to parse, modify
    and generate an XML document. Additionally we'll see how to generate UI objects (that are described in a QML
    file) on-the-fly and how to access and modify their properties.

    \section1 The UI
    The UI of this sample application consists of three buttons and a container. The first two buttons allow
    the user to load two different XBEL documents and the third button allows the user to save the currently
    loaded XBEL document back to file system (including possible changes done to the bookmarks).

    The container is the target location for the tree of controls, that visualize the structure of the XBEL document.
    The XBEL standard defines the elements
    \list
      \o folder
      \o bookmark
      \o separator
    \endlist

    The folder is represented by a \c Container with a folder icon and a title label (FolderItem.qml).
    It provides a custom property 'tagName' and a property 'title' that is aliased to the 'text' property
    of the \c titleField label. So whenever the 'title' property is changed, the 'text' property will be updated.

    \snippet streambookmarks/assets/FolderItem.qml 0

    The bookmarks are visualized by a \c Container with a star icon, a title label and a \c TextField that
    contains the bookmark URL (BookmarkItem.qml). The \c TextField is invisible by default and will be faded in
    when the user clicks on the title label.

    \snippet streambookmarks/assets/BookmarkItem.qml 0

    A separator is an image of a horizontal line (SeparatorItem.qml).

    \snippet streambookmarks/assets/SeparatorItem.qml 0

    The business logic of the application is encapsulated in the class App, which is
    exported to the UI as '_app'.

    \snippet streambookmarks/assets/main.qml 0

    Whenever the user clicks one of the load buttons, the \c load() method of the App object is invoked.

    \snippet streambookmarks/assets/main.qml 1

    If the user clicks the 'Save' button, the \c save() method of the App object is invoked.

    \snippet streambookmarks/assets/main.qml 2

    The container has the 'objectName' property set, so that it can be looked up from within C++.

    \section1 App

    Inside the constructor of \c App we load the main.qml file and retrieve the C++ object that represents
    the root node of the QML document. With the \l{QObject::}{findChild()} method we look up the \c Container
    object where we have assigned 'treeContainer' to the 'objectName' property.

    \snippet streambookmarks/src/app.cpp 0

    Whenever the user clicks one of the load buttons, the \c load() method of the App object is invoked with
    the file name passed as parameter.

    \snippet streambookmarks/src/app.cpp 1

    Inside \c load() we first remove all previously created controls from the \c treeContainer and then
    use the \c XbelReader class to parse the XML document and generate new controls inside the \c treeContainer.

    If the user clicks the 'Save' button, the \c save() method of the App object is invoked.

    \snippet streambookmarks/src/app.cpp 2

    Inside \c save() we try to open the file 'streambookmarks.xbel' inside the applications temp directory and
    then we use the \c XbelWriter class to iterate over the \c treeContainer, generate the XML document and
    store it to the file.

    \section1 XbelWriter Class Definition

    The \c XbelWriter class contains a private instance of QXmlStreamWriter,
    which provides an XML writer with a streaming API. \c XbelWriter also
    has a reference to the Container instance where the bookmark hierarchy
    is stored.

    \snippet streambookmarks/src/xbelwriter.hpp 0

    \section1 XbelWriter Class Implementation

    The \c XbelWriter constructor accepts a \a treeContainer to initialize within
    its definition. We enable \l{QXmlStreamWriter}'s auto-formatting property
    to ensure line-breaks and indentations are added automatically to empty
    sections between elements, increasing readability as the data is split into
    several lines.

    \snippet streambookmarks/src/xbelwriter.cpp 0

    The \c writeFile() function accepts a QIODevice object and sets it using
    \c setDevice(). This function then writes the document type
    definition(DTD), the start element, the version, and \c{treeContainer}'s
    top-level items.

    \snippet streambookmarks/src/xbelwriter.cpp 1

    The \c writeItem() function accepts a Control object and writes it
    to the stream, depending on its \c tagName, which can either be a "folder",
    "bookmark", or "separator".

    \snippet streambookmarks/src/xbelwriter.cpp 2

    \section1 XbelReader Class Definition

    The \c XbelReader contains a private instance of QXmlStreamReader, the
    companion class to QXmlStreamWriter. \c XbelReader also contains a
    reference to the Container that is used to group the bookmarks according
    to their hierarchy.

    \snippet streambookmarks/src/xbelreader.hpp 0

    \section1 XbelReader Class Implementation

    The \c XbelReader constructor accepts a Container to initialize the
    \c treeContainer within its definition.

    \snippet streambookmarks/src/xbelreader.cpp 0

    The \c read() function accepts a QIODevice and sets it using
    \l{QXmlStreamReader::}{setDevice()}. The actual process of reading only
    takes place if the file is a valid XBEL 1.0 file. Note that the XML input
    needs to be well-formed to be accepted by QXmlStreamReader. Otherwise, the
    \l{QXmlStreamReader::}{raiseError()} function is used to display an error
    message. Since the XBEL reader is only concerned with reading XML elements,
    it makes extensive use of the \l{QXmlStreamReader::}{readNextStartElement()}
    convenience function.

    \snippet streambookmarks/src/xbelreader.cpp 1

    The \c errorString() function is used if an error occurred, in order to
    obtain a description of the error complete with line and column number
    information.

    \snippet streambookmarks/src/xbelreader.cpp 2

    The \c readXBEL() function reads the name of a startElement and calls
    the appropriate function to read it, depending on whether if its a
    "folder", "bookmark" or "separator". Otherwise, it calls
    \l{QXmlStreamReader::}{skipCurrentElement()}. The Q_ASSERT() macro is used
    to provide a pre-condition for the function.

    \snippet streambookmarks/src/xbelreader.cpp 3

    The \c readTitle() function reads the bookmark's title.

    \snippet streambookmarks/src/xbelreader.cpp 4

    The \c readSeparator() function creates a separator. The element
    is then skipped using \l{QXmlStreamReader::}{skipCurrentElement()}.

    \snippet streambookmarks/src/xbelreader.cpp 5

    See the \l{http://pyxml.sourceforge.net/topics/xbel/}
    {XML Bookmark Exchange Language Resource Page} for more information
    about XBEL files.
*/
