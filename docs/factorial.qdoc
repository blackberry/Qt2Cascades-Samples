/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page factorial
    \example factorial
    \title Factorial States Example

    \section1 Description

    The Factorial States example shows how to use \l{The State Machine
    Framework} to calculate the factorial of an integer.

    \image factorial-example.png

    The statechart for calculating the factorial looks as follows:

    \image factorial-statechart-example.png
    \omit
    \caption This is a caption
    \endomit

    In other words, the state machine calculates the factorial of 6 and prints
    the result.

    \snippet factorial/src/factorial.hpp 0

    The Factorial class is used to hold the data of the computation, \c x and
    \c fac. It also provides a signal that's emitted whenever the value of \c
    x changes.

    \snippet factorial/src/transitions.hpp 1

    The FactorialLoopTransition class implements the guard (\c x > 1) and
    calculations (\c fac = \c x * \c fac; \c x = \c x - 1) of the factorial
    loop.

    \snippet factorial/src/transitions.hpp 2

    The FactorialDoneTransition class implements the guard (\c x <= 1) that
    terminates the factorial computation. It also prints the final result to
    standard output.

    \snippet factorial/src/main.cpp 3

    The application's main() function first creates the application object, a
    Factorial object and a state machine.

    \snippet factorial/src/main.cpp 4

    The \c compute state is created, and the initial values of \c x and \c fac
    are defined. A FactorialLoopTransition object is created and added to the
    state.

    \snippet factorial/src/main.cpp 5

    A final state, \c done, is created, and a FactorialDoneTransition object
    is created with \c done as its target state. The transition is then added
    to the \c compute state.

    \snippet factorial/src/main.cpp 6

    The machine's initial state is set to be the \c compute state. We export both
    the factorial and the state machine objects to QML, so that we are able to start
    the state machine from the UI and display the factorial values. Finally, the application's
    event loop is entered.
 */
