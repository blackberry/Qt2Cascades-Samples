/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page securesocketclient
    \example securesocketclient
    \title Secure Socket Client Example

    \section1 Description

    The Secure Socket Client example shows how to use QSslSocket to
    communicate over an encrypted (SSL) connection. It also demonstrates how
    to deal with authenticity problems, and how to display security and
    certificate information.

    The following screenshot shows a connection established with a Web
    server. The string "GET" was sent.

    \image securesocketclient-example.png

    The following screenshot shows the certificate chain of the Web
    server.

    \image securesocketclient-certificatechain.png

    \section1 Overview
    In this example we'll learn how to use the QSslSocket class to set up an
    secured network connection and how to use the QSslCertificate class to retrieve
    information about the certificates that are involved in the secured connection.

    \section1 The UI
    The UI of this sample application consists of the main view (MainView.qml), an error dialog (SslErrorView.qml) and a certificate info
    dialog (CertificateInfoView.qml). In the main view the user can type in a host name and a port number and click the 'Connect to host'
    button to set up a secured connection to the given host. If the server certificate could not be validated,
    the error dialog shows up where the user can either ignore the error and continue or terminate the connection.
    After the connection has been established, an input text field and the 'Send' button in the main view become
    enabled and the user can send commands over the encrypted connection.
    Next to the host name input field an lock icon will appear that the user can click to bring up the
    certificate info dialog.

    The business logic of the application is encapsulated in the class SslClient, which is
    exported to the UI as '_sslClient'.

    \snippet securesocketclient/assets/main.qml 0

    The main.qml contains a container with a \c DockLayout where the main view, error dialog and certificate info dialog are stacked on
    top of each other. The two dialogs are hidden by default and will only be visible if the bound 'visible' property of their controllers
    (exported C++ objects) become \c true.

    Whenever the user types in a host name, the 'hostName' property of the \c SslClient object is updated.

    \snippet securesocketclient/assets/MainView.qml 0

    If the user clicks the 'Connect to host' button, the \c secureConnect() slot of the \c SslClient object is invoked.

    \snippet securesocketclient/assets/MainView.qml 1

    \section1 SslClient
    The SslClient encapsulates the business logic of this application.
    It handles the low-level communication with the server via QSslSocket and
    mediates the input and output with the UI.

    In the constructor we create a \c SslErrorControl object, which controls the state of the error dialog, and connect its signals against
    the private slots of \c SslClient to be informed about user input from the error dialog.

    \snippet securesocketclient/src/SslClient.cpp 0

    Whenever the user clicks the 'Connect to host' button, the \c secureConnect() slot of the \c SslClient object is invoked.

    \snippet securesocketclient/src/SslClient.cpp 1

    Inside this method we create a QSslSocket object (if it doesn't exists yet) and connect against its signals to be informed
    about state changes (e.g. connection established or peer closed connection), when the SSL-handshake has finished and when new
    data arrived over the network.

    The call to \l{QSslSocket::}{connectToHostEncrypted()} on the QSslSocket object starts the actual SSL-handshake.

    \snippet securesocketclient/src/SslClient.cpp 2

    The \c socketStateChanged() slot is invoked whenever the QSslSocket notifies a state change. Inside this slot we update the
    connection state properties (done inside \c updateEnabledState()) and if the peer disconnected, we clean up the QSslSocket object.

    \snippet securesocketclient/src/SslClient.cpp 3

    The \c socketEncrypted() slot is invoked after the SSL-handshake has succeeded. Inside this slot we retrieve the information about
    what \l{QSslCipher}{cipher} is used for the secured connection and we make the \l{QSslCertificate}{certificate} information available
    to the certificate info dialog via a signal/slot connection.

    \section1 CertificateInfoControl
    The CertificateInfoControl represents a dialog that shows information about the certificate provided by the server and the certificate chain.
    It manages the 'visible' property of the dialog and provides a Cascades \c DataModel with the certificate information that can be plugged into
    a \c ListView in the UI.

    \snippet securesocketclient/src/CertificateInfoControl.cpp 0

    The \c setCertificateChain() method is invoked after the SSL-handshake succeeded. The passed list of QSslCertificate objects represents the
    certificate chain that is used to secure this connection.
    We iterate over the list and extract all important information that we store inside a \c QListDataModel. This data model is made available as
    property, so that it can easily be used within the UI as data source for a \c ListView.
*/
