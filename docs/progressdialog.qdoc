/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page progressdialog
    \example progressdialog
    \title Progress Dialog Example

    \section1 Description

    The QtConcurrent Progress Dialog example shows how to use the
    QFutureWatcher class to monitor the progress of a long-running operation.

    \image progressdialog-example.png

    \section1 Overview
    In this example we'll learn how to use the QFuture class of the QtConcurrent module to
    execute a long lasting operation in a separated thread and how to monitor the progress and
    state with the QFutureWatcher class.

    \section1 The UI
    The UI of this sample application consists of two buttons, one to start the operation and one
    to cancel it. The progress of the operation is visualized by a progress bar.
    Above the two buttons is a label that shows the number of CPU cores that are used for the calculation.

    The business logic of the application is encapsulated in the class ProgressDialog, which is
    exported to the UI as '_progressDialog'.

    \snippet progressdialog/assets/main.qml 0

    The text of the label contains a placeholder, which gets substituted with the number of cores as reported
    by the ProgressDialog object.

    \snippet progressdialog/assets/main.qml 1

    When the user clicks the 'Start' or 'Cancel' button, the startComputation() and cancelComputation() slots of the ProgressDialog
    object are invoked. Additionally the state of the buttons changes depending on whether a calculation is running or not.

    \snippet progressdialog/assets/main.qml 2

    The progress properties of the progress bar (provided by Cascades' ProgressIndicator class) are bound against the progress properties
    of the ProgressDialog app object, so that they get updated automatically.
    The progress bar is only visible while the calculation is running.

    \section1 ProgressDialog
    The ProgressDialog is the central class in this sample application that contains all the business logic.
    It provides the two slots to start and cancel the calculation and properties that reflect the state and progress
    of the calculation.
    ProgressDialog contains a QFutureWatcher as member variable, which is used to monitor the progress and state
    of a QFuture instance. For this the signals of the future watcher are connected against private slots inside the
    constructor of ProgressDialog.

    \snippet progressdialog/src/ProgressDialog.cpp 1

    When the user clicks the 'Start' button in the UI, the startCalculation() slot is invoked

    \snippet progressdialog/src/ProgressDialog.cpp 3

    Inside this slot, a vector is filled with some dummy value that act as input values for the calculation.
    Then the actual calculation is started by calling \l{QtConcurrent::map()}{QtConcurrent::map()}.
    This method from the QtConcurrent module takes a container and a function as parameters and executes the function
    once for each entry in the container in a separated thread. The function we use in this example just burns some CPU cycles:

    \snippet progressdialog/src/ProgressDialog.cpp 0

    However the call to \l{QtConcurrent::map()}{QtConcurrent::map()} does not block until the calculation has finished but returns
    a QFuture object instead, which acts as a handle to monitor the progress and state of the calculation.

    We set the returned future on the future watcher member variable and now the future watcher will emit the appropriated signals
    as soon as the future changes its progress or state.

    When the user wants to cancel the calculation and clicks on the 'Cancel' button, then the cancelCalculation() slot is invoked,
    which calls \l{QFutureWatcher::cancel()}{cancel()} on the QFutureWatcher object. This will cause the running calculation (and the used threads)
    to terminate.

    \snippet progressdialog/src/ProgressDialog.cpp 4

    Internally the QtConcurrent module uses the QThreadPool class for distributing the calculation over multiple threads.
    The thread pool uses as many threads in parallel as returned by \l{QThread::idealThreadCount()}{QThread::idealThreadCount()},
    which by default is the number of cores of the device the application is running on.
    The 'numberOfCores' property uses the same value:

    \snippet progressdialog/src/ProgressDialog.cpp 2
*/
