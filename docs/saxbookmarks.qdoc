/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page saxbookmarks
    \example saxbookmarks
    \title SAX Bookmarks Example

    \section1 Description

    The SAX Bookmarks example provides a reader for XML Bookmark Exchange Language (XBEL)
    files that uses Qt's SAX-based API to read and parse the files. The DOM Bookmarks
    example provides an alternative way to read this type of file.

    \image saxbookmarks-example.png

    \section1 Overview
    In this example we'll learn how to use the QXmlSimpleReader, QXmlDefaultHandler and QTextStream classes to parse, modify
    and generate an XML document. Additionally we'll see how to generate UI objects (that are described in a QML
    file) on-the-fly and how to access and modify their properties.

    \section1 The UI
    The UI of this sample application consists of three buttons and a container. The first two buttons allow
    the user to load two different XBEL documents and the third button allows the user to save the currently
    loaded XBEL document back to file system (including possible changes done to the bookmarks).

    The container is the target location for the tree of controls, that visualize the structure of the XBEL document.
    The XBEL standard defines the elements
    \list
      \o folder
      \o bookmark
      \o separator
    \endlist

    The folder is represented by a \c Container with a folder icon and a title label (FolderItem.qml).
    It provides a custom property 'tagName' and a property 'title' that is aliased to the 'text' property
    of the \c titleField label. So whenever the 'title' property is changed, the 'text' property will be updated.

    \snippet saxbookmarks/assets/FolderItem.qml 0

    The bookmarks are visualized by a \c Container with a star icon, a title label and a \c TextField that
    contains the bookmark URL (BookmarkItem.qml). The \c TextField is invisible by default and will be faded in
    when the user clicks on the title label.

    \snippet saxbookmarks/assets/BookmarkItem.qml 0

    A separator is an image of a horizontal line (SeparatorItem.qml).

    \snippet saxbookmarks/assets/SeparatorItem.qml 0

    The business logic of the application is encapsulated in the class App, which is
    exported to the UI as '_app'.

    \snippet saxbookmarks/assets/main.qml 0

    Whenever the user clicks one of the load buttons, the \c load() method of the App object is invoked.

    \snippet saxbookmarks/assets/main.qml 1

    If the user clicks the 'Save' button, the \c save() method of the App object is invoked.

    \snippet saxbookmarks/assets/main.qml 2

    The container has the 'objectName' property set, so that it can be looked up from within C++.

    \section1 App
    Inside the constructor of \c App we load the main.qml file and retrieve the C++ object that represents
    the root node of the QML document. With the \l{QObject::}{findChild()} method we look up the \c Container
    object where we have assigned 'treeContainer' to the 'objectName' property.

    \snippet saxbookmarks/src/app.cpp 0

    Whenever the user clicks one of the load buttons, the \c load() method of the App object is invoked with
    the file name passed as parameter.

    \snippet saxbookmarks/src/app.cpp 1

    Inside \c load() we first remove all previously created controls from the \c treeContainer and then
    use the \c XbelHandler class in combination with the QXmlSimpleReader class to parse the XML document and
    generate new controls inside the \c treeContainer.

    If the user clicks the 'Save' button, the \c save() method of the App object is invoked.

    \snippet saxbookmarks/src/app.cpp 2

    Inside \c save() we try to open the file 'saxbookmarks.xbel' inside the applications temp directory and
    then we use the \c XbelGenerator class to iterate over the \c treeContainer, generate the XML document and
    store it to the file.

    \section1 XbelGenerator Class Definition

    The \c XbelGenerator class contains a reference to the Container instance where
    the bookmark hierarchy is stored and a QTextStream instance that is used to write
    out the XML data.
    The actual generation of the XML document is done inside the write() method.

    \snippet saxbookmarks/src/xbelgenerator.hpp 0

    \section1 XbelGenerator Class Implementation

    The \c XbelGenerator constructor accepts a \a treeContainer to initialize within
    its definition.

    \snippet saxbookmarks/src/xbelgenerator.cpp 0

    The \c write() method creates configures the QTextStream instance and writes out
    the processing instructions and top-level element for a valid XBEL document.

    Afterwards it iterates recursively over the \c{treeContainer} to calls \c generateItem()
    for each child control of the container.

    \snippet saxbookmarks/src/xbelgenerator.cpp 1

    The \c generateItem() method accepts a Control object and the indention depth of the current XML element.
    It first extracts the type and the title from the control and then writes out the XML
    data for the current object depending on the \c tagName, which can either be a 'folder',
    'bookmark', or 'separator'.
    If the control is a Container it will call itself recursively with an increased indention depth.

    \snippet saxbookmarks/src/xbelgenerator.cpp 2

    \section1 XbelHandler Class Definition

    \c XbelHandler inherits from QXmlDefaultHandler, which is an interface with virtual methods
    that act as callbacks for the SAX parser.

    The \c XbelHandler contains a reference to the Container that is used to group
    the bookmarks according to their hierarchy. Since a SAX parser only reports when
    a new XML element starts and ends, we have to keep track of the hierarchy of the XML
    document ourself. Therefor the \c XBelHandler also keeps a reference to the \c Control it
    is currently working on.

    \snippet saxbookmarks/src/xbelhandler.hpp 0

    \section1 XbelHandler Class Implementation

    The \c XbelHandler constructor accepts a Container to initialize the
    \c treeContainer within its definition.

    \snippet saxbookmarks/src/xbelhandler.cpp 0

    The \c startElement() method is called whenever the SAX parser discovers an opening
    XML element. In this case we do the sanity check whether it's a valid XBEL document
    and then, depending on the element's tag name, we create a new \c Control by calling \c createChildItem()
    and setup its properties.

    \snippet saxbookmarks/src/xbelhandler.cpp 1

    The \c errorString() function is used if an error occurred, in order to
    obtain a description of the error complete with line and column number
    information.

    \snippet saxbookmarks/src/xbelhandler.cpp 3

    The \c endElement() method is called whenever the SAX parser discovers a closing XML element.
    In this case we change the current control back to its parent control, to get the mapping of
    the XML hierarchy to the control object hierarchy right.

    \snippet saxbookmarks/src/xbelhandler.cpp 2

    The \c createChildItem() method loads a QML file and returns the C++ object that
    represents the root node of the QML file.
    Depending on the current tag name, different QML files are loaded.

    \snippet saxbookmarks/src/xbelhandler.cpp 4

    See the \l{XML Bookmark Exchange Language Resource Page} for more
    information about XBEL files.
*/
